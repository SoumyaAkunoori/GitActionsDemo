name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'databricks/**'
jobs:

  pylint:
    name: pylint report
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0
      
    - name: Install Pylint
      run: pip install pylint

    - name: Run PyLint on Notebooks
      run: find databricks/ -name "*.py" -exec pylint --output-format=json {} \; > pylint_report.json
 
    - name: Upload PyLint Report
      uses: actions/upload-artifact@v3.1.2
      with:
        name: pylint-report
        path: pylint_report.json
    # Check Markdown
    - name: markdownlint-cli2-action
      uses: DavidAnson/markdownlint-cli2-action@v9.0.0

  pytest:
    name: pytest and coverage report
    runs-on: ubuntu-latest
    needs: pylint
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0
      
    - name: Install Dependencies
      run: pip install -r requirements.txt
      
    - name: Run Pytest and Coverage
      run: |
        find databricks/ -type f -name "*.py" -exec sh -c 'pytest --cov=databricks --cov-report=xml --junitxml=pytest_report.xml "$@"' _ {} +
        coverage xml
      continue-on-error: true

    
    - name: Upload Pytest and Coverage Reports
      uses: actions/upload-artifact@v2
      with:
        name: pytest-and-coverage-reports
        path: |
          pytest_report.xml
          coverage.xml

  sonar:
      name: sonar scan
      runs-on: ubuntu-latest
      needs: pytest
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - uses: sonarsource/sonarqube-scan-action@master
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # If you wish to fail your job when the Quality Gate is red, uncomment the
        # following lines. This would typically be used to fail a deployment.
        # - uses: sonarsource/sonarqube-quality-gate-action@master
        #   timeout-minutes: 5
        #   env:
        #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

deploy:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build Artifact
        run: |
          mkdir -p dist
          python setup.py sdist --formats=gztar -d dist/
        env:
          PYTHONPATH: .
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: dist/*.tar.gz

  publish:
    name: Publish Artifact
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3.4.0
        with:
          name: my-artifact
      - name: Install Databricks CLI
        uses: microsoft/install-databricks-cli@v1.0.0
      - name: Publish Artifact to Databricks
        run: |
          databricks artifacts upload --path /my-project/my-artifact.tar.gz --overwrite dist/*.tar.gz
        env:
          DATABRICKS_HOST_URL: ${{ secrets.DATABRICKS_HOST_URL }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - name: Install Databricks CLI
        uses: microsoft/install-databricks-cli@v1.0.0
      - name: Extract Artifact
        run: |
          tar -xzf dist/*.tar.gz -C .
          mv dist/*.tar.gz .
      - name: Deploy to Databricks Cluster
        run: |
          databricks jobs create --json-file job.json
        env:
          DATABRICKS_HOST_URL: ${{ secrets.DATABRICKS_HOST_URL }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    name: Deploy to Databricks
    runs-on: ubuntu-latest
    needs: sonar
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0
      
    - name: install-databricks-cli
      uses: microsoft/install-databricks-cli@v1.0.0
    
    #- name: Deploy Notebooks to Databricks
    #  run: |
    #    databricks workspace mkdirs /my-project
   #   databricks workspace import -f SOURCE_PATH=databricks/ -o /my-project/ -l PYTHON --recursive --overwrite
      #env:
       # DATABRICKS_HOST_URL: ${{ secrets.DATABRICKS_HOST_URL }}
        #DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
    - name: Deploy Notebooks to Databricks
      uses: microsoft/databricks-import-notebook@v1.0.0
      with:
        # Databricks host
        databricks-host: ${{ secrets.DATABRICKS_HOST_URL }}
        # Databricks token
        databricks-token: ${{ secrets.DATABRICKS_TOKEN }}
        # LOCAL_NOTEBOOKS_PATH
        local-path: ./databricks/databricks
        # REMOTE_NOTEBOOK_PATH
        remote-path: /my-project
        
    

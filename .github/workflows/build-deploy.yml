name: CI

on:
  push:
    branches:
      - main
    #paths:
    #  - databricks/databricks/**/*.py
jobs:

  pylint:
    name: pylint report
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0
      
    - name: Install Pylint
      run: pip install pylint

    - name: Run PyLint on Notebooks
      run: find databricks/ -name "*.py" -exec pylint --output-format=json {} \; > pylint_report.json
 
    - name: Upload PyLint Report
      uses: actions/upload-artifact@v3.1.2
      with:
        name: pylint-report
        path: pylint_report.json
    # Check Markdown
    - name: markdownlint-cli2-action
      uses: DavidAnson/markdownlint-cli2-action@v9.0.0

  pytest:
    name: pytest and coverage report
    runs-on: ubuntu-latest
    needs: pylint
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0
      
    - name: Install Dependencies
      run: pip install -r requirements.txt
      
    - name: Run Pytest and Coverage
      run: |
        find databricks/ -type f -name "*.py" -exec sh -c 'pytest --cov=databricks --cov-report=xml --junitxml=pytest_report.xml "$@"' _ {} +
        coverage xml
      continue-on-error: true

    
    - name: Upload Pytest and Coverage Reports
      uses: actions/upload-artifact@v2
      with:
        name: pytest-and-coverage-reports
        path: |
          pytest_report.xml
          coverage.xml

  sonarqube:
    name: Sonarqube scan
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Check if secret SONAR_TOKEN is available
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ ! ${SONAR_TOKEN} ]]; then
            echo "::error::Secret \`SONAR_TOKEN\` was not found: it is required to use SonarQube."
            exit 1
          fi
      - uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to Databricks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.4.0

    - name: Install Databricks CLI
      run:
        pip install databricks-cli
      
        echo -e "[DEFAULT]\nhost = https://adb-1128000650204589.9.azuredatabricks.net\ntoken = dapi61f701468bffc505edc50e9af2ace6a9-3" > ~/.databrickscfg

    - name: Deploy Notebooks to Databricks
      run: |
        
        if [[ "$OSTYPE" == "win32" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]; then
          IsWindows=true
        else
          IsWindows=false
        fi

        if [ $IsWindows = true ]; then
          dirsep="\\"
        else
          dirsep="/"
        fi

        for path in databricks/databricks**/*.py
        do
          dir=$(dirname $path)
          dir=${dir#"databricks/databricks"}
          dir=${dir//$dirsep}
          databricks workspace mkdirs /$dir
          contents=$(cat $path)
          databricks workspace import -f SOURCE -l PYTHON /$dir/$(basename $path) $path --overwrite
        done
        # import io_utils.py
        databricks workspace import -f SOURCE -l PYTHON /databricks/databricks/io_utils.py databricks/databricks/io_utils.py --overwrite

      env:
        DATABRICKS_HOST: "https://adb-1128000650204589.9.azuredatabricks.net" 
        DATABRICKS_TOKEN: "dapi61f701468bffc505edc50e9af2ace6a9-3"

    
  

